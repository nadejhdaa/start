<?php
/*
Make Sure you include:
ctools_include('modal');
ctools_modal_add_js();
On the pages you put your link.
*/
/**
 * Implements hook_menu().
 */
function start_helper_menu() {
  $items = array();
 
  $items['mymodule/%ctools_js/create'] = array(
    'page callback' => 'start_helper_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mymodule/%ctools_js/%/edit'] = array(
    'page callback' => 'start_helper_edit_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

   $items['formtable'] = array(
    'title' => 'Накладные',
    'page callback' => 'render_invoices', 
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function render_invoices() { 
  ctools_include('modal');
  ctools_modal_add_js(); 
  _example_include_modal();
  $output = '<div id="magical-modal-link">' . l('Создать накладную', 'mymodule/nojs/create', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
  $table_form = drupal_get_form('my_form');
  $output .= drupal_render($table_form);
  return $output;
}
 

/**
 * Ajax menu callback.
 */
function start_helper_callback($ajax) {
  global $user;
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_include('node.pages', 'node', ''); 
  // Create a blank node object here. You can also set values for your custom fields here as well.

    $node = (object) array(
      'uid' => $user->uid, 
      'name' => (isset($user->name) ? $user->name : ''), 
      'type' => 'invoice', 
      'language' => LANGUAGE_NONE,
      );
    $form_state = array(
      'title' => t('Add invoice'),
      'ajax' => TRUE,
    );
    $form_state['build_info']['args'] = array($node);
    // change this to your type node form
    $output = ctools_modal_form_wrapper('invoice_node_form', $form_state);

   if (!empty($form_state['executed'])) {
      $output = array();
       
      // Выводим сообщение об успешной отправке формы.
      $output[] = ajax_command_html('#messages-wrapper', theme('status_messages'));

      // Закрываем модальное окно.
      $output[] = ctools_ajax_command_reload();
      $output[] = ctools_modal_command_dismiss();
      $output[] = ctools_modal_form_render($form_state, $output);
    } 

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

      // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return 'test';
  }
}

 
/* вывод формы редактирования в модальном окне */
function start_helper_edit_callback($ajax, $nid) {
  global $user;   
    ctools_include('modal');
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    ctools_include('node.pages', 'node', ''); 
  // Create a blank node object here. You can also set values for your custom fields here as well.

    $node = node_load($nid);
    $form_state = array(
      'title' => t('Edit'). ' ' . $node->title,
      'ajax' => TRUE,
    );
    $form_state['build_info']['args'] = array($node);
    // change this to your type node form
    $output = ctools_modal_form_wrapper('invoice_node_form', $form_state);

     if (!empty($form_state['executed'])) {
      $output = array();
       
      // Выводим сообщение об успешной отправке формы.
      $output[] = ajax_command_html('#messages-wrapper', theme('status_messages'));

      // Закрываем модальное окно.
      $output[] = ctools_ajax_command_reload();
      $output[] = ctools_modal_command_dismiss();
      $output[] = ctools_modal_form_render($form_state, $output);

    }
     

      // Return the ajax instructions to the browser via ajax_render().
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

      // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
   
}


function start_load_node_by_type($type) {
  $data = array();
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $type, '=')
    ->execute()
    ->fetchCol();
  
  // Get all of the article nodes.
  $nodes = node_load_multiple($nids); 
  $data['nodes'] = $nodes;
  $query = db_select('taxonomy_index', 'i');
  $query->innerJoin('taxonomy_term_data', 't', 't.tid = i.tid');
  $query->fields('t', array('tid','name'));
  $query->condition('i.nid', $nids, 'IN');
  $terms = $query->execute()->fetchAllAssoc('tid');
  $data['terms'] = $terms;
  return $data;
}

 
 

function my_form($form, $form_state) {
  $type = 'invoice';
  $data = start_load_node_by_type($type);
  $nodes = $data['nodes'];
  $terms = $data['terms'];
  //dpm($data); 
  $header = array
  ( 
    array('data' => 'Откуда',        'field' => 'from',               'sort' => 'ASC'),
    array('data' => 'Куда',        'field' => 'to',               ),
    array('data' => 'Получатель',        'field' => 'recipient',            ),
    array('data' => 'Статус',        'field' => 'status',               ),
    array('data' => 'Действие',        'field' => 'action',           ),
 
  );
  $options = array();
  foreach ($nodes as $node) {
    $tableData[$node->nid]['from'] = $terms[$node->field_i_from['und'][0]['tid']]->name;
    $tableData[$node->nid]['to'] = $terms[$node->field_i_to['und'][0]['tid']]->name;
    $tableData[$node->nid]['recipient'] = user_load($node->field_i_recipient['und'][0]['uid'])->name;
    $tableData[$node->nid]['status'] = $terms[$node->field_i_status['und'][0]['tid']]->name;
    $tableData[$node->nid]['action'] = ctools_modal_text_button(t('Редактировать'), 'mymodule/nojs/'.$node->nid.'/edit', t('Contact'), 'ctools-modal-example-contact-style');
  }
  

  

  $rows = array();
  
  /*
  foreach ($tableData  as $key => $row)
    {
      $rows[$key] = array
      ( 
        array('data' => $row['from']) , array('data' => $row['to']), array('data' => $row['recipient']) , 
        array('data' => $row['status']) , array('data' => $row['action']),
      );
    }
  */

  foreach ($tableData  as $key => $row)
    {
      $rows[$key] = array
      ( 
        'from' => $row['from'],
        'to' => $row['to'],
        'recipient' => $row['recipient'],
        'status' => $row['status'],
        'action' => $row['action'], 
      );
    }

  $order = tablesort_get_order($header);
  $sort = tablesort_get_sort($header);
  $sql=$order['sql'];
  dpm($rows);
  if($sort=='desc') {

    usort($rows, function($a, $b) use($sql) {
    return $a[0]['data'][$sql] > $b[0]['data'][$sql]? -1 : 1;

  });

  }
  if($sort=='asc') {
      usort($rows, function($a, $b) use ($sql) {
        return $a['data'] < $b['data']? -1 : 1;
      });
  }


  $form['table'] = array
  (
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#empty' => t('No users found'),
  );
  $form['actions']['select_action'] = array(
    '#type' => 'select',
    '#options' => array(
      'delete' => 'Удалить',
      'change_date' => 'Сменить дату',
    ),
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
      '#value' => t('Submit'),
  );
   
  return $form;

}

function my_form_submit(&$form, &$form_state) {
  //dpm($form_state['values']);
  $action = $form_state['values']['select_action'];
  foreach ($form_state['values']['table'] as $key => $value) {
    if(!empty($value)) {
      $operations[] = array('mymodule_change_invoice', array($key, $action));
    }
  }

  batch_set(array(
    // Массив операций и их параметров
    'operations' => $operations,
    // Функция, которая будет выполнена после окончания всех операций
    'finished' => 'mymodule_batch_finished',
    // Заголовок страницы с прогресс баром.
    // Опционально, по умолчанию t('Processing')
    'title' => 'Обновление дат',
    // Сообщение, показываемое при инициализации.
    // Опционально, по умолчанию t('Initializing.')
    'init_message' => 'Подготовка данных',
    // Сообщение, показываемое при выполнении операций.
    // Опционально, по умолчанию t('Completed @current of @total.')
    'progress_message' => 'Выполнено @current из @total.',
    // Сообщение показываемое при ошибке выполнения операции.
    // Опционально, по умолчанию t('An error has occurred.')
    'error_message' => 'Произошла ошибка.',
  ));
}

/**
 * Batch process callback.
 */
function mymodule_change_invoice($nid, $action, &$context) {
  // Производим манипуляции над нодами
  
  switch ($action) {
    case 'delete':
      node_delete($nid);
      break;
    
    case 'change_date':
      $node = node_load($nid);
      $node->created = REQUEST_TIME;
      node_save($node);
      break; 
  } 
 
  // Эта информация будет доступна в mymodule_batch_finished
  $context['results']['updated_nodes']++;
  // Сообщение выводимое под прогресс-баром после окончания текущей операции
  $context['message'] = 'Обновлена дата у материала <em>' . check_plain($node->title) . '</em>';
}
 
/**
 * Batch finish callback.
 */
function mymodule_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Обновлена дата у ' . $results['updated_nodes'] . ' материалов');
  }
  else {
    drupal_set_message('Завершено с ошибками.', 'error');
  }
}

function _example_include_modal() {

  static $added = FALSE;
  if ($added == FALSE) {
    $added = TRUE;

    // Include the CTools tools that we need.
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    
    // Создаем массив с настройками для модального окна.
    $example_style = array(
      'example-contact-style' => array(
        'modalSize' => array(
          'type' => 'fixed', // Тип модального окна. фиксированный или резиновый.
          'width' => 420, // Ширина модального окна.
          'height' => 'auto', // Высота модального окна.
        ),
        'modalOptions' => array(
          'opacity' => (float) 0.3, // Прозрачность фона.
          'background-color' => '#000000', // Цвет фона.
        ),
        'closeText' => '', // Текст для закрытия модального окна.
        'loadingText' => '', // Текст, отображаемый в момент загрузки модального окна.
        'animation' => 'fadeIn', // Эффект появления модального окна.
        'animationSpeed' => 'fast', // Скорость анимации.
      ),
    );

    // Подключаем настройки для модального окна.
    drupal_add_js($example_style, 'setting');
  }
}